Client and Server 
create a server --> express
API --> get, post, put
endpoint --> app.get('') whatever defined under '' is called endpoint
database ---> Mongodb ( no sql ) schema less there is no preferred schema (tables and all )

Web Dev --> client + server + database 
store info --> database

mongodb --> collection documents fields
SQL     --> table row columns

Moongoose --> 
translator between nodejs and mongodb ( so that we can communicate)
we can define  how data should look

DB.JS --> file where we conncet to a mongodb database , 
we connect to a url and then export that object so that we can use it 

Next thing is model ---> 
Model blueprint of data , represents the collections of database


body-parser -->It acts a middleware  client sends the request to server to get some data. inside the body , body parsers helps 
to parse the incomming data (data format may be form, json and any other) and gives us back in req.body.
app.use(middleware)


Inside the mongodb --> we can save the data using documents name .save() 
since we are connected to mongodb using db object 
and have defined the model and schema of the collection using the name.model('name',schema name)


/////// parameterized route 
localhost:3000/person
localhost:3000/person/chef
localhost:3000/person/worker

iske liye we can define the route app.get('/person/:whatever name you want to give ')


// express Router --> 
Restaurant --> menu, person , restaurants different endpoints 
so to make structure look good and organize we can use router 
express router helps to create a router for specific collections and in the main file we can call that router for specific endpoint
there are many api for many endpoints . so in the single server file we have using 
app.use('/endpoint',name of router)


// update --> (which record to update, exactly what to update )
put/patch  method 
hr document k pass unique --> _id


/// ---> dotenv module 
to manage sensitive information npm i dotenv
create a .env file -->
Inside our server file --> require('dotenv).config()
access --> process.env.PORT || 3000
and same file i can add inside the .gitignore file


/// authentication --> 
middleware ---> series of function call that happens between req and response cycle 
app.use(middleware name) ---> by this we have attached a middleware for every req that is coming to you 
middleware accepts --> req, res, next


//authentication ---> passport (3rd party middleware)
passport --> check the user credentials 
key concepts --> passport
middlware --> req ko authenticate krega
strategy:
serialize and deserialize :

passport --> install passport and strategy ( local , jwt ) 
once we get the strategy


----> auth.js ( authentication related things )


Session and tokens and cookies and browser Storage 
like in the flipkart ---> hr page authenticated so ek baar hi login kro and can access any page no need to login again for different route 

user auth --> page access krne k liye session and token needed 
session and token --> manages user states 

session --> user aaya sign in kiya then server authenticate and since it's the first time so server create a session object 
and provides a unique id and store that  in our database and in response it send back the cookie which contains the seesion id 
and if next time person want to check other page then it send the cookie and server checks the database if same session id 
is present 

cookie ----> used by website---> search, interaction stored in the cookie object   ( piece of data ). whenever you acceess a new webisye 
website sends the cookie file to server and then website customize accoridng to the cookie.
but next time if i open the same site then insdie the browser data is stored inside the cookie file and https requests k saath bhej deta

Types of cookiess -->
session cookies --> temporary ( browser ko bnd krte hain tb remove ho jaata hai )
persistent cookies --> preferences and login password and all

types of storage --> 
local storage , indexedDB , cookies

cookies storage ---> received from server when we lohgin and it can contains persistant cookie and session cookie as well
local storage --> store data local on browser.not send to other http requests like cookies
seesion storage --> temporary 



Token --> login kiya then server sends back the token and now this token is not saved in database.
now for every other request check ki token valid hai ki nhi and token is created using the secret key which is known ot 
server only 
jwt token --> token is stored in cookies
session vs tokens::
sessions --> stored in db and cookies jaati hai and again check db if same session id and  
tokens -->


JWT Tokens --> header(algo) , payload and signature 
user sign in --->( username, pass) --> server (authenticate) --> gives the token ( payload + secret key )
and next time we want to access protected route --> authorization header k andr token de denge --> then server 
verify the token using secret key 



jwt.sign() --> payload and secret key  and verify